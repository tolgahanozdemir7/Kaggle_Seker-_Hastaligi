import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

data=pd.read_csv("diabetes.csv")
df=data.copy()
df.head()

df.tail()

df.describe().T
seker_hastalari=df[df["Outcome"]==1]
saglikli_insanlar=df[df["Outcome"]==0]

plt.scatter(saglikli_insanlar["Age"],saglikli_insanlar["Glucose"],color="green",label="saglikli",alpha=0.4)
plt.scatter(seker_hastalari["Age"],seker_hastalari["Glucose"],color="red",label="diabet_hastasi",alpha=0.4)
plt.xlabel("Age")
plt.ylabel("Glucose")
plt.legend()
plt.show()


y=df.Outcome.values
x_ham_veri=df.drop(["Outcome"],axis=1)

# Normalization
x=(x_ham_veri - np.min(x_ham_veri))/(np.max(x_ham_veri)-np.min(x_ham_veri))

x_ham_veri.head()
x.head()

x_train,x_test,y_train,y_test=train_test_split(x,y ,test_size=0.2,random_state=1)
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(x_train,y_train)
prediction=knn.predict(x_test)

knn.score(x_test,y_test)


sayac=1
for k in range(1,11):
    knn_yeni=KNeighborsClassifier(n_neighbors=k)
    knn_yeni.fit(x_train,y_train)
    print(sayac," ","Dogruluk orani: %",knn_yeni.score(x_test,y_test)*100)
    sayac+=1


# Yeni bir hasta tahmini için:
from sklearn.preprocessing import MinMaxScaler
 
# normalization yapıyoruz - daha hızlı normalization yapabilmek için MinMax  scaler kullandık...
sc = MinMaxScaler()
sc.fit_transform(x_ham_veri)
 
new_prediction = knn.predict(sc.transform(np.array([[6,148,72,35,0,33.6,0.627,50]])))
new_prediction[0]
